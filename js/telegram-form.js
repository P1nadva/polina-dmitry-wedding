// telegram-form.js - –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å Telegram –æ—Ç–ø—Ä–∞–≤–∫–æ–π
class TelegramForm {
    constructor() {
        this.form = document.getElementById('rsvpForm');
        this.attendanceRadios = document.querySelectorAll('input[name="attendance"]');
        this.guest2Fields = document.getElementById('guest2Fields');
        this.drink2Fields = document.getElementById('drink2Fields');
        
        // üîë –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –î–ê–ù–ù–´–ï –ù–ê –í–ê–®–ò:
        this.botToken = '5204273046:AAH0FrePiMSqkmaC5ezZVEi_bcXMNwPBN00'; // –í–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather
        this.chatId = '413268218'; // –í–∞—à Chat ID
        
        this.init();
    }
    
    init() {
        if (!this.form) {
            console.error('‚ùå –§–æ—Ä–º–∞ RSVP –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —Ñ–æ—Ä–º—ã...');
        
        this.attendanceRadios.forEach(radio => {
            radio.addEventListener('change', (e) => {
                this.handleAttendanceChange(e.target.value);
            });
        });
        
        this.form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleSubmit();
        });
        
        this.hideGuest2Fields();
        console.log('‚úÖ Telegram —Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞');
    }
    
    handleAttendanceChange(value) {
        if (value === 'with_guest') {
            this.showGuest2Fields();
        } else {
            this.hideGuest2Fields();
        }
    }
    
    showGuest2Fields() {
        if (this.guest2Fields) this.guest2Fields.classList.add('visible');
        if (this.drink2Fields) this.drink2Fields.classList.add('visible');
        this.setGuest2NameRequired(true);
    }
    
    hideGuest2Fields() {
        if (this.guest2Fields) this.guest2Fields.classList.remove('visible');
        if (this.drink2Fields) this.drink2Fields.classList.remove('visible');
        this.setGuest2NameRequired(false);
        this.clearGuest2Fields();
    }
    
    setGuest2NameRequired(required) {
        const guest2NameInput = document.getElementById('guest2_name');
        if (guest2NameInput) {
            guest2NameInput.required = required;
        }
    }
    
    clearGuest2Fields() {
        const guest2NameInput = document.getElementById('guest2_name');
        const drink2Checkboxes = document.querySelectorAll('input[name="drinks2"]');
        
        if (guest2NameInput) {
            guest2NameInput.value = '';
        }
        
        drink2Checkboxes.forEach(checkbox => {
            checkbox.checked = false;
        });
    }
    
    async handleSubmit() {
        const submitBtn = this.form.querySelector('.submit-btn');
        const formData = this.collectFormData();
        
        if (!this.validateForm(formData)) {
            return;
        }
        
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="btn-icon">üì°</span> –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...';
        
        try {
            const success = await this.sendToTelegram(formData);
            
            if (success) {
                this.showMessage('‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram. –ñ–¥—ë–º –≤–∞—Å –Ω–∞ —Å–≤–∞–¥—å–±–µ! üíí', 'success');
                this.form.reset();
                this.hideGuest2Fields();
                this.animateSuccess(submitBtn);
            } else {
                throw new Error('Telegram –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
            // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            this.showDataForManualSubmission(formData, submitBtn);
        }
    }
    
    async sendToTelegram(formData) {
        const message = this.formatTelegramMessage(formData);
        
        console.log('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram:', message);
        
        try {
            const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: this.chatId,
                    text: message,
                    parse_mode: 'HTML'
                })
            });
            
            const result = await response.json();
            console.log('üì¨ –û—Ç–≤–µ—Ç Telegram:', result);
            
            return result.ok === true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ fetch:', error);
            return false;
        }
    }
    
    formatTelegramMessage(data) {
        const attendanceEmoji = {
            'coming': '‚úÖ',
            'with_guest': 'üë•', 
            'not_coming': '‚ùå'
        };
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (data.attendance === 'not_coming') {
            return `
<b>üíí –ù–û–í–´–ô –û–¢–í–ï–¢ –ù–ê –°–í–ê–î–ï–ë–ù–û–ï –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï</b>

<b>üë§ –ì–æ—Å—Ç—å:</b> ${data.guestName}
<b>${attendanceEmoji[data.attendance]} –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ:</b> ${this.getAttendanceText(data.attendance)}

<b>üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> ${new Date().toLocaleString('ru-RU')}
<b>üåê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑:</b> —Å–∞–π—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            `.trim();
        }
        
        return `
<b>üíí –ù–û–í–´–ô –û–¢–í–ï–¢ –ù–ê –°–í–ê–î–ï–ë–ù–û–ï –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï</b>

<b>üë§ –ì–æ—Å—Ç—å:</b> ${data.guestName}
<b>${attendanceEmoji[data.attendance]} –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ:</b> ${this.getAttendanceText(data.attendance)}
${data.guest2Name ? `<b>üë• –í—Ç–æ—Ä–æ–π –≥–æ—Å—Ç—å:</b> ${data.guest2Name}` : ''}
<b>üç∑ –ù–∞–ø–∏—Ç–∫–∏ –≥–æ—Å—Ç—è 1:</b> ${data.drinks.join(', ')}
${data.drinks2.length > 0 ? `<b>üç∏ –ù–∞–ø–∏—Ç–∫–∏ –≥–æ—Å—Ç—è 2:</b> ${data.drinks2.join(', ')}` : ''}

<b>üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> ${new Date().toLocaleString('ru-RU')}
<b>üåê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑:</b> —Å–∞–π—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        `.trim();
    }
    
    getAttendanceText(value) {
        const attendanceMap = {
            'coming': '–Ø –±—É–¥—É',
            'with_guest': '–Ø –±—É–¥—É –Ω–µ –æ–¥–∏–Ω',
            'not_coming': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø—Ä–∏–¥—É'
        };
        return attendanceMap[value] || value;
    }
    
    // Fallback: –µ—Å–ª–∏ Telegram –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    showDataForManualSubmission(data, submitBtn) {
        const messageText = `
‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–º –≤ WhatsApp –∏–ª–∏ Telegram:

üë§ –ò–º—è: ${data.guestName}
‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: ${this.getAttendanceText(data.attendance)}
${data.guest2Name ? `üë• –í—Ç–æ—Ä–æ–π –≥–æ—Å—Ç—å: ${data.guest2Name}` : ''}
üç∑ –ù–∞–ø–∏—Ç–∫–∏: ${data.drinks.join(', ')}
${data.drinks2.length > 0 ? `üç∏ –ù–∞–ø–∏—Ç–∫–∏ –≥–æ—Å—Ç—è 2: ${data.drinks2.join(', ')}` : ''}

–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º üì±
        `.trim();
        
        this.showMessage(messageText, 'error');
        this.resetButton(submitBtn);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        this.addCopyButton(messageText);
    }
    
    addCopyButton(text) {
        const copyBtn = document.createElement('button');
        copyBtn.type = 'button';
        copyBtn.innerHTML = 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram';
        copyBtn.className = 'copy-telegram-btn';
        
        copyBtn.onclick = () => {
            navigator.clipboard.writeText(text).then(() => {
                copyBtn.innerHTML = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä!';
                copyBtn.style.background = 'linear-gradient(135deg, #4CAF50, #45a049)';
                
                setTimeout(() => {
                    copyBtn.innerHTML = 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram';
                    copyBtn.style.background = '';
                }, 2000);
            }).catch(() => {
                copyBtn.innerHTML = '‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è';
            });
        };
        
        const messageElement = this.form.querySelector('.form-message');
        if (messageElement) {
            messageElement.appendChild(copyBtn);
        }
    }
    
    animateSuccess(button) {
        button.innerHTML = '<span class="btn-icon">‚úÖ</span> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!';
        button.style.background = 'linear-gradient(135deg, #0088cc, #00aced)';
        
        setTimeout(() => {
            this.resetButton(button);
        }, 4000);
    }
    
    resetButton(button) {
        button.disabled = false;
        button.innerHTML = '<span class="btn-icon">ü§ñ</span> –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram';
        button.style.background = '';
    }
    
    collectFormData() {
        const drinks = Array.from(document.querySelectorAll('input[name="drinks"]:checked'))
            .map(cb => cb.value);
        const drinks2 = Array.from(document.querySelectorAll('input[name="drinks2"]:checked'))
            .map(cb => cb.value);
        
        const data = {
            guestName: document.getElementById('guest_name').value.trim(),
            attendance: document.querySelector('input[name="attendance"]:checked')?.value || '',
            guest2Name: document.getElementById('guest2_name').value.trim(),
            drinks: drinks,
            drinks2: drinks2
        };
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–¥–µ—Ç, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø–∏—Ç–∫–∞—Ö
        if (data.attendance === 'not_coming') {
            data.drinks = ['–ù–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç'];
            data.drinks2 = [];
            data.guest2Name = '';
        }
        
        console.log('üìä –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram:', data);
        return data;
    }
    
    validateForm(data) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –≥–æ—Å—Ç—è
        if (!data.guestName.trim()) {
            this.showMessage('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é', 'error');
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        if (!data.attendance) {
            this.showMessage('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è', 'error');
            return false;
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–¥–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (data.attendance === 'not_coming') {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–¥–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–∏—Ç–∫–æ–≤');
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –≤—Ç–æ—Ä–æ–≥–æ –≥–æ—Å—Ç—è, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç "—Å –≥–æ—Å—Ç–µ–º"
        if (data.attendance === 'with_guest' && !data.guest2Name.trim()) {
            this.showMessage('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤—Ç–æ—Ä–æ–≥–æ –≥–æ—Å—Ç—è', 'error');
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤ –≥–æ—Å—Ç—è 1 (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–¥–µ—Ç)
        if (data.drinks.length === 0) {
            this.showMessage('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –Ω–∞–ø–∏—Ç–∫–∞–º', 'error');
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤ –≥–æ—Å—Ç—è 2, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç "—Å –≥–æ—Å—Ç–µ–º"
        if (data.attendance === 'with_guest' && data.drinks2.length === 0) {
            this.showMessage('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –Ω–∞–ø–∏—Ç–∫–∞–º –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≥–æ—Å—Ç—è', 'error');
            return false;
        }

        return true;
    }
    
    showMessage(text, type) {
        const existingMessage = this.form.querySelector('.form-message');
        if (existingMessage) {
            existingMessage.remove();
        }
        
        const message = document.createElement('div');
        message.className = `form-message ${type}`;
        message.innerHTML = text.replace(/\n/g, '<br>');
        this.form.appendChild(message);
        
        if (type === 'success') {
            setTimeout(() => message.remove(), 5000);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.telegramForm = new TelegramForm();
});